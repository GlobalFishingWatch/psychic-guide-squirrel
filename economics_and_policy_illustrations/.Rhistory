ggplot(aes(x = date, y = total_distance_traveled))+
geom_line() +
geom_smooth()+
ggtitle("Distance traveled per month all countries all vessels")+
theme_minimal()
monthly_effort_by_mmsi %>%
group_by(date, country) %>%
summarise(total_distance_traveled = sum(distance_traveled)) %>%
arrange(date) %>%
ggplot() +
geom_path(aes(x = date, y = total_distance_traveled)) +
theme_minimal() +
geom_smooth(aes(x = date, y = total_distance_traveled)) +
trelliscopejs::facet_trelliscope(~country)
monthly_effort_by_mmsi %>%
group_by(date) %>%
summarise(active_hours = sum(active_hours)) %>%
arrange(date) %>%
ggplot(aes(x = date, y = active_hours))+
geom_line() +
geom_smooth()+
ggtitle("monthly effort (hours) all countries combined")+
theme_minimal()
monthly_effort_by_mmsi %>%
group_by(date) %>%
summarise(total_distance_traveled = sum(distance_traveled)) %>%
arrange(date) %>%
ggplot(aes(x = date, y = total_distance_traveled))+
geom_line() +
geom_smooth()+
ggtitle("Distance traveled per month all countries all vessels")+
theme_minimal()
detrending_function <- function(df, y_var, time_step){
if (time_step == "weekly") {
foo <- as.formula(paste(y_var,'~', "as.factor(month(date)) + as.logical(week(date) %in% c(52,53,1))"))
lm(foo , data = df)
}
else if (time_step == "monthly") {
foo <- as.formula(paste(y_var,'~', "as.factor(month(date))"))
lm(foo , data = df)
}
else
{stop("Time step in not valid")}
}
detrended_plot <- function(detrended_df){
ggplot(detrended_df) +
geom_path(aes(x = date, y = residuals)) +
geom_smooth(aes(x = date, y = residuals))
}
fuel_plot <- function(df, var){
ggplot(df) +
geom_point(aes_string(x = "log(fuel_price)", y =  var)) +
geom_smooth(aes_string(x = "log(fuel_price)", y = var))
}
get_fuel_coefs <- function(df, y_var, time_step){
if (time_step == "weekly") {
foo <- as.formula(paste(y_var, "~", "factor(lubridate::month(date)) +  as.logical(week(date) %in% c(52,53,1)) + log(fuel_price)"))
broom::tidy(lm(foo , data = df))
}
else if (time_step == "monthly") {
foo <- as.formula(paste(y_var, "~", "factor(lubridate::month(date)) + log(fuel_price)"))
broom::tidy(lm(foo , data = df))
}
else{stop("Time step not valid")}
}
nested_monthly_df <- monthly_effort_by_mmsi %>%
filter(!is.na(country)) %>%
group_by(date, country) %>%
summarise(fuel_price = mean(fuel_price),
distance_traveled = sum(distance_traveled, na.rm = T),
active_hours = sum(active_hours, na.rm = T),
hours_distance = sum(hours_distance, na.rm = T)) %>%
ungroup() %>%
group_by(country) %>%
nest(.key = "grouped_data")
nested_monthly_df_by_mmsi <- monthly_effort_by_mmsi %>%
filter(!is.na(country)) %>%
group_by(country) %>%
nest(.key = "ungrouped_data")
nested_monthly_df <- nested_monthly_df %>%
left_join(nested_monthly_df_by_mmsi)
detrended_monthly_distance_traveled <- nested_monthly_df %>%
mutate(detrended_model = map(grouped_data, detrending_function, y_var = "distance_traveled", time_step = "monthly"),
residuals = purrr::map2(grouped_data, detrended_model, add_residuals, "residuals"),
detrended_plots = trelliscopejs::map_plot(residuals, detrended_plot),
fuel_plots = trelliscopejs::map_plot(grouped_data, fuel_plot, var = "log(distance_traveled)"),
fuel_coefs = purrr::map(ungrouped_data, get_fuel_coefs, y_var = "log(distance_traveled)", time_step = "monthly"))
detrended_monthly_distance_traveled %>%
trelliscopejs::trelliscope(name = "detrended distance traveled")
detrended_monthly_distance_traveled %>%
unnest(fuel_coefs) %>%
filter(term == "log(fuel_price)", p.value < 0.05) %>%
ggplot(aes(x = country, y = estimate, color = estimate > 0))+
geom_point() +
coord_flip()
detrended_monthly_distance_traveled %>%
unnest(fuel_coefs) %>%
filter(term == "log(fuel_price)", p.value < 0.05)
monthly_distance_model_1.1 = lm(log(distance_traveled) ~ log(fuel_price), data = monthly_effort_by_mmsi)
monthly_distance_model_1.1 = lm(log(distance_traveled) ~ log(fuel_price), data = monthly_effort_by_mmsi)
monthly_distance_model_1.2 = lm(log(distance_traveled) ~ country + month + log(fuel_price), data = monthly_effort_by_mmsi)
monthly_distance_model_1.3 = lm(log(distance_traveled) ~ country + month + log(lagged_fuel_price) , data = monthly_effort_by_mmsi)
stargazer::stargazer(monthly_distance_model_1.1, monthly_distance_model_1.2, monthly_distance_model_1.3,
type = 'html',
omit  = c("country","month"),
ci = TRUE)
Hughes_elasticity_recent = -0.041
Hughes_elasticity_past = -0.335
Havnarek_elasticity = -0.09
Winebreak_elasticity = 0.005
monthly_intercept = monthly_distance_model_1.1$coefficients[1]
monthly_GFW_elasticity = monthly_distance_model_1.1$coefficients[2]
monthly_slopes <- tibble(source = c("Global Fishing Fleet", "Global meta-analysis of gasoline demand", "U.S per capita gasoline consumption (1975-1980)", "U.S per capita gasoline consumption (2001-2006)",  "U.S Trucking sector"),
elasticity = c(monthly_GFW_elasticity, Havnarek_elasticity, Hughes_elasticity_past, Hughes_elasticity_recent, Winebreak_elasticity))
monthly_limits <- ggplot2::aes(ymax = -0.009, ymin = -0.034)
monthly_elasticity_bar_plot <- ggplot(monthly_slopes,
aes(x = forcats::fct_reorder(source, elasticity), y = elasticity, fill = source)) +
geom_bar(stat = "identity", width = .5) +
theme_minimal() +
scale_x_discrete(position = "top") +
theme(axis.text.x = element_text(angle = 22, hjust = .03),
plot.margin = unit(c(0, 1.5, 0.2, .2), "in")) +
xlab("") +
guides(fill = FALSE) +
scale_fill_npg() +
geom_errorbar(data = monthly_slopes %>% filter(source == "Global Fishing Fleet"),  monthly_limits,  stat = "identity", width = 0.25)+
ylab("price elasticity of fuel demand")
monthly_elasticity_bar_plot
total_distance_by_month <- monthly_effort_by_mmsi %>%
group_by(date) %>%
summarise(distance_traveled = sum(distance_traveled),
fuel_price = mean(fuel_price, na.rm = T))
monthly_distance_ts <- ts(total_distance_by_month$distance_traveled, start = c(2013, 1), frequency = 12)
monthly_fuel_price_ts <- ts(total_distance_by_month$fuel_price, start = c(2013, 1), frequency = 12)
decomposed_monthly_distance_ts <- decompose(monthly_distance_ts, "additive")
decomposed_monthly_distance_df <- data_frame(original_data = as.double(decomposed_monthly_distance_ts$x),
trend = as.double(decomposed_monthly_distance_ts$trend),
decomposed_distance = as.double(decomposed_monthly_distance_ts$x) - as.double(decomposed_monthly_distance_ts$seasonal),
fuel_price = total_distance_by_month$fuel_price,
date = total_distance_by_month$date)
monthly_deseasoned_ts <- ts(as.double(decomposed_monthly_distance_ts$x) - as.double(decomposed_monthly_distance_ts$seasonal),start = c(2013, 1), frequency = 12)/1000000
monthly_distance_trend_ts <- decomposed_monthly_distance_ts$trend/1000000
monthly_fuel_price_ts <- ts(total_distance_by_month$fuel_price, start = c(2013, 1), frequency = 12)
monthly_fuel_ts_plot_base_R.pryr %<a-%{
par(mar = c(4, 4, 4, 5))
plot(monthly_fuel_price_ts,
type = 'l',
ylab = "Fuel price ($ per metric ton)",
las = 1,
col = "navyblue",
bty = "u")
par(new = T)
plot(monthly_deseasoned_ts,
type = 'l',
yaxt = 'n',
ylab = '',
col = "grey80",
bty = "n")
lines(monthly_distance_trend_ts,
type = 'l',
yaxt = 'n',
ylab = '',
col = "red")
axis(side = 4, las = 1)
mtext(side = 4, 'Distance traveled (million km)', line = 3.5)
legend("bottomleft",bty='n',col=c("navyblue","grey80",2),lty=1,
legend=c("Fuel price","Distance traveled (km)","Trend"), cex = .8, xjust = 0.5)
}
monthly_fuel_ts_plot_base_R.pryr
monthly_price_ts_plot <- decomposed_monthly_distance_df %>%
ggplot(aes(x = date, y = fuel_price)) +
geom_line(color = "navyblue") +
theme(panel.border = element_rect(fill=NA, size=0.5, color = "black",
linetype="solid"),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = -0.035 ,vjust = 2.12, colour = "navyblue", size = 10),
plot.subtitle = element_text(hjust = -0.06 ,vjust = 2.12, colour = "navyblue", size = 10),
axis.text.y = element_text(colour = "navyblue", size = 10),
axis.text.x = element_text(size = 10),
axis.line =   element_blank()) +
#ggtitle("Fuel price",subtitle = "($ per metric ton)") +
labs(x = NULL, y = NULL)
monthly_distance_ts_plot <- decomposed_monthly_distance_df %>%
mutate_at(vars(original_data,trend,decomposed_distance), funs(./1000000)) %>%
ggplot(labels = scales::comma) +
geom_line(aes(x = date, y = decomposed_distance), color = "grey80") +
geom_line(aes(x = date, y = trend), color = "#00A4E6") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.major.x = element_blank(),
panel.background = element_blank(),
#axis.line.y = element_blank(),
plot.title = element_text(hjust = .99 ,vjust=2.12, colour="#00A4E6", size = 10),
plot.subtitle = element_text(hjust = .99 ,vjust=2.12, colour="#00A4E6", size = 10),
axis.text.y = element_text(colour="#00A4E6", size = 10),
axis.text.x = element_text(size = 10),
axis.line =   element_blank())+
ggtitle("Distance traveled",subtitle =" (million km)") +
labs(x=NULL, y= NULL)+
scale_x_date(limits = c(ymd("2013-01-01"),ymd("2016-12-31")))
make_double_axis_plot <- function(p1,p2){
# Get the plot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the locations of the plot panels in g1.
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# ggplot contains many labels that are themselves complex grob;
# usually a text grob surrounded by margins.
# When moving the grobs from, say, the left to the right of a plot,
# make sure the margins and the justifications are swapped around.
# The function below does the swapping.
# Taken from the cowplot package:
# https://github.com/wilkelab/cowplot/blob/master/R/switch_axis.R
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
# Tick mark lengths can change.
# A function to get the original tick mark length
# Taken from the cowplot package:
# https://github.com/wilkelab/cowplot/blob/master/R/switch_axis.R
plot_theme <- function(p) {
plyr::defaults(p$theme, theme_get())
}
tml <- plot_theme(p1)$axis.ticks.length   # Tick mark length
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + tml
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Labels grob
left = textGrob(paste("     Fuel Price","($ per metric ton)", sep = "\n"), x = 0, y = 0.5, just = c("left", "top"), gp = gpar(fontsize = 10, col =  "navyblue"))
right =  textGrob(paste("Distance Traveled", "(million km)    ", sep = "\n"), x = 1, y = 0.5, just = c("right", "top"), gp = gpar(fontsize = 10, col =  "#00A4E6"))
labs = gTree("Labs", children = gList(left, right))
# New row in the gtable for labels
height = unit(3, "grobheight", left)
g1 <- gtable_add_rows(g1, height, 2)
# Put the label in the new row
g1 = gtable_add_grob(g1, labs, t = 3, l = 3, r = 5)
# Turn off clipping in the plot panel
g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
g1
}
monthly_double_axis_plot <- make_double_axis_plot(monthly_price_ts_plot,monthly_distance_ts_plot)
grid.draw(monthly_double_axis_plot)
grid.draw(monthly_double_axis_plot)
china_plot <- readRDS("final_figures/chinese_moratoria_plot")
monthly_multi_panel_plot <- ggdraw() +
draw_plot(china_plot, 0, .5, 1, .5) +
draw_plot(monthly_double_axis_plot, 0, 0, .5, .5) +
draw_plot(monthly_elasticity_bar_plot, .5, 0, .5, .5) +
draw_plot_label(c("A", "B", "C"), c(0, 0, 0.5), c(1, 0.5, 0.5), size = 12)
save_plot("final_figures/monthly_multi_panel_plot.pdf", monthly_multi_panel_plot,
ncol = 1, # we're saving a grid plot of 2 columns
nrow = 3,
base_aspect_ratio = 1:5,
base_width = 15
)
weekly_effort_by_mmsi <- readRDS("saved_files/weekly_effort_by_mmsi")
weekly_effort_by_mmsi <- weekly_effort_by_mmsi %>%
group_by(mmsi) %>%
mutate(lagged_distance_traveled = lag(distance_traveled, order_by = mmsi),
month = as.factor(month(date, label = TRUE)),
country = as.factor(country),
new_year = as.logical(week(date) %in% c(52))) %>%
ungroup() %>%
arrange(date)
weekly_effort_by_mmsi %>%
group_by(date) %>%
summarise(active_hours = sum(active_hours)) %>%
arrange(date) %>%
ggplot(aes(x = date, y = active_hours))+
geom_line()+
geom_smooth()+
ggtitle("Weekly effort (hours) all countries combined")+
theme_minimal()
weekly_effort_by_mmsi %>%
group_by(date) %>%
summarise(total_distance_traveled = sum(distance_traveled)) %>%
arrange(date) %>%
ggplot(aes(x = date, y = total_distance_traveled)) +
geom_line()+
geom_smooth()+
ggtitle("Distance traveled per week all countries all vessels")+
theme_minimal()
weekly_effort_by_mmsi %>%
group_by(date, country) %>%
summarise(total_distance_traveled = sum(distance_traveled)) %>%
arrange(date) %>%
ggplot() +
geom_path(aes(x = date, y = total_distance_traveled)) +
theme_minimal() +
geom_smooth(aes(x = date, y = total_distance_traveled)) +
trelliscopejs::facet_trelliscope(~country)
nested_weekly_df <- weekly_effort_by_mmsi %>%
filter(!is.na(country)) %>%
group_by(date, country) %>%
summarise(fuel_price = mean(fuel_price),
distance_traveled = sum(distance_traveled, na.rm = T),
active_hours = sum(active_hours, na.rm = T),
hours_distance = sum(hours_distance, na.rm = T)) %>%
ungroup() %>%
group_by(country) %>%
nest(.key = "grouped_data")
nested_weekly_df_by_mmsi <- weekly_effort_by_mmsi %>%
filter(!is.na(country)) %>%
group_by(country) %>%
nest(.key = "ungrouped_data")
nested_weekly_df <- nested_weekly_df %>%
left_join(nested_weekly_df_by_mmsi)
detrended_weekly_distance_traveled <- nested_weekly_df %>%
mutate(detrended_model = map(grouped_data, detrending_function, y_var = "distance_traveled", time_step = "weekly"),
residuals = purrr::map2(grouped_data, detrended_model, add_residuals, "residuals"),
detrended_plots = trelliscopejs::map_plot(residuals, detrended_plot),
fuel_plots = trelliscopejs::map_plot(grouped_data, fuel_plot, var = "log(distance_traveled)"),
fuel_coefs = purrr::map(ungrouped_data, get_fuel_coefs, y_var = "log(distance_traveled)", time_step = "weekly"))
detrended_weekly_distance_traveled %>%
trelliscopejs::trelliscope(name = "detrended distance traveled")
detrended_weekly_distance_traveled %>%
trelliscopejs::trelliscope(name = "detrended distance traveled", panel_col = "fuel_plots")
detrended_weekly_distance_traveled %>%
unnest(fuel_coefs) %>%
filter(term == "log(fuel_price)", p.value < 0.05) %>%
ggplot(aes(x = country, y = estimate, color = estimate > 0))+
geom_point() +
coord_flip()
detrended_weekly_distance_traveled %>%
unnest(fuel_coefs) %>%
filter(term == "log(fuel_price)", p.value < 0.05) %>%
arrange(estimate)
weekly_distance_model_2.1 = lm(log(distance_traveled) ~ log(fuel_price), data = weekly_effort_by_mmsi)
weekly_distance_model_2.2 = lm(log(distance_traveled) ~ log(fuel_price) + country + month + new_year , data = weekly_effort_by_mmsi)
weekly_distance_model_2.3 = lm(log(distance_traveled) ~ country + month + new_year  + log(lagged_fuel_price) , data = weekly_effort_by_mmsi)
weekly_intercept = weekly_distance_model_2.1$coefficients[1]
weekly_GFW_elasticity = weekly_distance_model_2.1$coefficients[2]
weekly_slopes <- tibble(source = c("Global Fishing Fleet", "Global meta-analysis of gasoline demand", "U.S per capita gasoline consumption (1975-1980)", "U.S per capita gasoline consumption (2001-2006)",  "U.S Trucking sector"),
elasticity = c(weekly_GFW_elasticity, Havnarek_elasticity, Hughes_elasticity_past, Hughes_elasticity_recent, Winebreak_elasticity))
weekly_limits <- ggplot2::aes(ymax = -0.058, ymin = -0.072)
weekly_elasticity_bar_plot <- ggplot(weekly_slopes,
aes(x = forcats::fct_reorder(source, elasticity), y = elasticity, fill = source)) +
geom_bar(stat = "identity", width = .5) +
theme_minimal() +
scale_x_discrete(position = "top") +
theme(axis.text.x = element_text(angle = 22, hjust = -.05),
plot.margin = unit(c(0, 1.5, 0.2, .2), "in")) +
xlab("") +
guides(fill = FALSE) +
scale_fill_npg() +
geom_errorbar(data = weekly_slopes %>% filter(source == "Global Fishing Fleet"),  limits,  stat = "identity", width = 0.25) +
ylab("price elasticity of fuel demand")
weekly_intercept = weekly_distance_model_2.1$coefficients[1]
weekly_GFW_elasticity = weekly_distance_model_2.1$coefficients[2]
weekly_slopes <- tibble(source = c("Global Fishing Fleet", "Global meta-analysis of gasoline demand", "U.S per capita gasoline consumption (1975-1980)", "U.S per capita gasoline consumption (2001-2006)",  "U.S Trucking sector"),
elasticity = c(weekly_GFW_elasticity, Havnarek_elasticity, Hughes_elasticity_past, Hughes_elasticity_recent, Winebreak_elasticity))
weekly_limits <- ggplot2::aes(ymax = -0.058, ymin = -0.072)
weekly_elasticity_bar_plot <- ggplot(weekly_slopes,
aes(x = forcats::fct_reorder(source, elasticity), y = elasticity, fill = source)) +
geom_bar(stat = "identity", width = .5) +
theme_minimal() +
scale_x_discrete(position = "top") +
theme(axis.text.x = element_text(angle = 22, hjust = -.05),
plot.margin = unit(c(0, 1.5, 0.2, .2), "in")) +
xlab("") +
guides(fill = FALSE) +
scale_fill_npg() +
geom_errorbar(data = weekly_slopes %>% filter(source == "Global Fishing Fleet"),  weekly_limits,  stat = "identity", width = 0.25) +
ylab("price elasticity of fuel demand")
weekly_elasticity_bar_plot
weekly_intercept = weekly_distance_model_2.1$coefficients[1]
weekly_GFW_elasticity = weekly_distance_model_2.1$coefficients[2]
weekly_slopes <- tibble(source = c("Global Fishing Fleet", "Global meta-analysis of gasoline demand", "U.S per capita gasoline consumption (1975-1980)", "U.S per capita gasoline consumption (2001-2006)",  "U.S Trucking sector"),
elasticity = c(weekly_GFW_elasticity, Havnarek_elasticity, Hughes_elasticity_past, Hughes_elasticity_recent, Winebreak_elasticity))
weekly_limits <- ggplot2::aes(ymax = -0.058, ymin = -0.072)
weekly_elasticity_bar_plot <- ggplot(weekly_slopes,
aes(x = forcats::fct_reorder(source, elasticity), y = elasticity, fill = source)) +
geom_bar(stat = "identity", width = .5) +
theme_minimal() +
scale_x_discrete(position = "top") +
theme(axis.text.x = element_text(angle = 22, hjust = .03),
plot.margin = unit(c(0, 1.5, 0.2, .2), "in")) +
xlab("") +
guides(fill = FALSE) +
scale_fill_npg() +
geom_errorbar(data = weekly_slopes %>% filter(source == "Global Fishing Fleet"),  weekly_limits,  stat = "identity", width = 0.25) +
ylab("price elasticity of fuel demand")
weekly_elasticity_bar_plot
total_distance_by_week <- weekly_effort_by_mmsi %>%
group_by(date) %>%
summarise(distance_traveled = sum(distance_traveled),
fuel_price = mean(fuel_price, na.rm = T))
weekly_distance_ts <- ts(total_distance_by_week$distance_traveled, start = c(2013, 1), frequency = 52)
weekly_fuel_price_ts <- ts(total_distance_by_week$fuel_price, start = c(2013, 1), frequency = 52)
decomposed_weekly_distance_ts <- decompose(weekly_distance_ts, "additive")
decomposed_weekly_distance_df <- data_frame(original_data = as.double(decomposed_weekly_distance_ts$x),
trend = as.double(decomposed_weekly_distance_ts$trend),
decomposed_distance = as.double(decomposed_weekly_distance_ts$x) - as.double(decomposed_weekly_distance_ts$seasonal),
fuel_price = total_distance_by_week$fuel_price,
date = total_distance_by_week$date)
weekly_deseasoned_ts <- ts(as.double(decomposed_weekly_distance_ts$x) - as.double(decomposed_weekly_distance_ts$seasonal),start = c(2013, 1), frequency = 52)/1000000
weekly_distance_trend_ts <- decomposed_weekly_distance_ts$trend/1000000
weekly_fuel_price_ts <- ts(total_distance_by_week$fuel_price, start = c(2013, 1), frequency = 52)
weekly_fuel_ts_plot_base.pryr %<a-%{
par(mar = c(4, 4, 4, 5))
plot(weekly_fuel_price_ts,
type = 'l',
ylab = "Fuel price ($ per metric ton)",
las = 1,
col = "navyblue",
bty = "u")
par(new = T)
plot(weekly_deseasoned_ts,
type = 'l',
yaxt = 'n',
ylab = '',
col = "grey80",
bty = "n")
lines(weekly_distance_trend_ts,
type = 'l',
yaxt = 'n',
ylab = '',
col = "red")
axis(side = 4, las = 1)
mtext(side = 4, 'Distance traveled (million km)', line = 3.5)
legend("bottomleft",bty = 'n',col = c("navyblue","grey80",2), lty = 1,
legend = c("Fuel price", "Distance traveled (km)", "Trend"), cex = .8, xjust = 0.5)
}
weekly_fuel_ts_plot_base.pryr
weekly_price_ts_plot <- decomposed_weekly_distance_df %>%
ggplot(aes(x = date, y = fuel_price)) +
geom_line(color = "navyblue") +
theme(panel.border = element_rect(fill=NA, size=0.5, color = "black",
linetype="solid"),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = -0.035 ,vjust = 2.12, colour = "navyblue", size = 10),
plot.subtitle = element_text(hjust = -0.06 ,vjust = 2.12, colour = "navyblue", size = 10),
axis.text.y = element_text(colour = "navyblue", size = 10),
axis.text.x = element_text(size = 10),
axis.line =   element_blank()) +
#ggtitle("Fuel price",subtitle = "($ per metric ton)") +
labs(x = NULL, y = NULL) +
scale_y_continuous(breaks  = c(300,500,750,1000), limits = c(300, 1050))
weekly_distance_ts_plot <- decomposed_weekly_distance_df %>%
mutate_at(vars(original_data,trend,decomposed_distance), funs(./1000000)) %>%
ggplot(labels = scales::comma) +
geom_line(aes(x = date, y = decomposed_distance), color = "grey80") +
geom_line(aes(x = date, y = trend), color = "#00A4E6") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.major.x = element_blank(),
panel.background = element_blank(),
#axis.line.y = element_blank(),
plot.title = element_text(hjust = .99 ,vjust=2.12, colour="#00A4E6", size = 10),
plot.subtitle = element_text(hjust = .99 ,vjust=2.12, colour="#00A4E6", size = 10),
axis.text.y = element_text(colour="#00A4E6", size = 10),
axis.text.x = element_text(size = 10),
axis.line =   element_blank()) +
ggtitle("Distance traveled", subtitle = " (million km)") +
labs(x = NULL, y = NULL)+
scale_x_date(limits = c(ymd("2013-01-01"),ymd("2016-12-31"))) +
scale_y_continuous(breaks  = c(2000,2400,2800, 3200), limits = c(2000,3200))
weekly_double_axis_plot <- make_double_axis_plot(weekly_price_ts_plot,weekly_distance_ts_plot)
grid.draw(weekly_double_axis_plot)
grid.draw(weekly_double_axis_plot)
weekly_multi_panel_plot <- ggdraw() +
draw_plot(china_plot, 0, .5, 1, .5) +
draw_plot(weekly_double_axis_plot, 0, 0, .5, .5) +
draw_plot(weekly_elasticity_bar_plot, .5, 0, .5, .5) +
draw_plot_label(c("A", "B", "C"), c(0, 0, 0.5), c(1, 0.5, 0.5), size = 12)
save_plot("final_figures/weekly_multi_panel_plot.pdf", pp,
ncol = 1, # we're saving a grid plot of 2 columns
nrow = 3,
base_aspect_ratio = 1:5,
base_width = 15
)
save_plot("final_figures/weekly_multi_panel_plot.pdf", weekly_multi_panel_plot,
ncol = 1, # we're saving a grid plot of 2 columns
nrow = 3,
base_aspect_ratio = 1:5,
base_width = 15
)
